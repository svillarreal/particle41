name: Particle41 CICD
on:
  push:
    branches:
      - main
    paths:
      - ".github/**"
      - "app/**"
      - "terraform/**"
  workflow_dispatch:
jobs:
  DeployTerraform:
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Configure Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.5"
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init -reconfigure -backend-config="bucket=terraform-remote-state-particle41-dev" \
          -backend-config="dynamodb_table=terraform-remote-state-lock-particle41-dev" \
          -backend-config="key=particle41/dev/terraform.tfstate"
      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate
      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var-file="vars/dev.tfvars"
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -var-file="vars/dev.tfvars" -auto-approve
  BuildApp:
    needs: DeployTerraform
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Install NodeJS 22
        uses: actions/setup-node@v3
        with:
          node-version: 22
      - name: Install Dependencies
        run: npm ci
        working-directory: app
      - name: Test
        run: npm test
        working-directory: app
      - name: Audit
        run: npm audit --audit-level=low
        working-directory: app
      - name: Lint
        run: npm run lint
        working-directory: app
      - name: Build TypeScript
        run: npm run build
        working-directory: app
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 851717133722.dkr.ecr.us-east-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        working-directory: app
      - name: Configure Docker Buildx
        run: docker buildx create --use
        working-directory: app
      - name: Build and Push Docker Image to ECR
        working-directory: app
        run: |
          IMAGE_TAG=851717133722.dkr.ecr.us-east-1.amazonaws.com/particle41-ecr-dev:latest
          docker buildx build --platform linux/amd64,linux/arm64 -t $IMAGE_TAG --push .
  DeployApp:
    runs-on: ubuntu-latest
    needs: BuildApp
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Update Kubeconfig for EKS
        working-directory: app
        run: aws eks update-kubeconfig --region us-east-1 --name particle41-eks-dev
      - name: Deploy app to EKS
        working-directory: app
        run: kubectl apply -f kubernetes/deployment.yaml
      - name: Create Kubernetes Service
        working-directory: app
        run: kubectl apply -f kubernetes/service.yaml
